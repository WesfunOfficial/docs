"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99],{1407:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>c,toc:()=>o});var i=a(5893),s=a(1151);const t={sidebar_position:5},d="Package definitions",c={id:"packaging/recipes/package_definition",title:"Package definitions",description:"A recipe build can result in a number of packages being produced from a single source, through an automatic splitting system. Certain subpackages are already defined in the boulder project to ensure consistency of package splitting and names, whereas some may be explicitly defined in a recipe to fine-tune the results.",source:"@site/docs/packaging/recipes/package_definition.md",sourceDirName:"packaging/recipes",slug:"/packaging/recipes/package_definition",permalink:"/docs/packaging/recipes/package_definition",draft:!1,unlisted:!1,editUrl:"https://github.com/serpent-os/docs/tree/main/docs/packaging/recipes/package_definition.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"packageSidebar",previous:{title:"Build dependencies",permalink:"/docs/packaging/recipes/build_deps"},next:{title:"Triggers",permalink:"/docs/category/triggers"}},r={},o=[{value:"Package metadata",id:"package-metadata",level:2},{value:"<code>summary</code>",id:"summary",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"<code>rundeps</code>",id:"rundeps",level:3},{value:"Defining a subpackage",id:"defining-a-subpackage",level:2},{value:"Overriding defaults",id:"overriding-defaults",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"package-definitions",children:"Package definitions"}),"\n",(0,i.jsxs)(n.p,{children:["A recipe build can result in a number of packages being produced from a single source, through an automatic splitting system. Certain subpackages are already defined in the ",(0,i.jsx)(n.code,{children:"boulder"})," project to ensure consistency of package splitting and names, whereas some may be explicitly defined in a recipe to fine-tune the results."]}),"\n",(0,i.jsxs)(n.p,{children:["Every recipe also contains a ",(0,i.jsx)(n.strong,{children:"root package definition"}),", i.e the default target. This is merged with the standard metadata."]}),"\n",(0,i.jsx)(n.h2,{id:"package-metadata",children:"Package metadata"}),"\n",(0,i.jsx)(n.h3,{id:"summary",children:(0,i.jsx)(n.code,{children:"summary"})}),"\n",(0,i.jsx)(n.p,{children:"A brief, one line description of the package based on its contents."}),"\n",(0,i.jsx)(n.h3,{id:"description",children:(0,i.jsx)(n.code,{children:"description"})}),"\n",(0,i.jsxs)(n.p,{children:["A more in depth description of the package, usually sourced from a ",(0,i.jsx)(n.code,{children:"README"})," or project description."]}),"\n",(0,i.jsx)(n.h3,{id:"rundeps",children:(0,i.jsx)(n.code,{children:"rundeps"})}),"\n",(0,i.jsx)(n.p,{children:"A list of manually specified runtime dependencies. These may be added to ensure that one split package depends on another, or to add a hard dependency that is not accounted for by the automatic systems."}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'rundeps:\n    # Depend on subpackage in this set ending with `-devel`\n    - "%(name)-devel"\n    - filesystem\n'})}),"\n",(0,i.jsx)(n.h2,{id:"defining-a-subpackage",children:"Defining a subpackage"}),"\n",(0,i.jsxs)(n.p,{children:["Additional packages may be defined by extending the ",(0,i.jsx)(n.code,{children:"packages"})," set, and matching a set of paths to include in that subpackage."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'packages:\n    - "%(name)-tools":\n        summary: Cool tools package\n        description: |\n            Provides a cool set of tools!\n        paths:\n            - /usr/bin/extra-tool\n'})}),"\n",(0,i.jsx)(n.p,{children:"Note that automatic dependencies and providers still work with subpackages, so binary deps will resolve without having to manually\nspecify those."}),"\n",(0,i.jsx)(n.h2,{id:"overriding-defaults",children:"Overriding defaults"}),"\n",(0,i.jsxs)(n.p,{children:["To override splitting in the root package, for example, to avoid ",(0,i.jsx)(n.code,{children:"-devel"})," subpackage when building a headers-only package, you could do:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"paths:\n    - /usr/include\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To add to a predefined package, such as ",(0,i.jsx)(n.code,{children:"-docs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'packages:\n    - "%(name)-docs":\n        paths:\n            - /usr/share/custom-docs\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>c,a:()=>d});var i=a(7294);const s={},t=i.createContext(s);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);