"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[678],{4843:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var s=i(5893),d=i(1151);const c={sidebar_position:4},a="Build dependencies",r={id:"packaging/recipes/build_deps",title:"Build dependencies",description:"Every build of a recipe by boulder will create an entirely new root, with only the absolute minimum support dependencies in place.",source:"@site/docs/packaging/recipes/build_deps.md",sourceDirName:"packaging/recipes",slug:"/packaging/recipes/build_deps",permalink:"/docs/packaging/recipes/build_deps",draft:!1,unlisted:!1,editUrl:"https://github.com/serpent-os/docs/tree/main/docs/packaging/recipes/build_deps.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"packageSidebar",previous:{title:"Metadata",permalink:"/docs/packaging/recipes/metadata"},next:{title:"Package definitions",permalink:"/docs/packaging/recipes/package_definition"}},o={},l=[{value:"<code>$name</code> - standard deps",id:"name---standard-deps",level:2},{value:"<code>binary()</code> - Standard binaries",id:"binary---standard-binaries",level:2},{value:"<code>sysbinary()</code> - System binaries",id:"sysbinary---system-binaries",level:2},{value:"<code>pkgconfig()</code> - PkgConfig / pkgconf",id:"pkgconfig---pkgconfig--pkgconf",level:2},{value:"<code>pkgconfig32()</code> - 32-bit PkgConf",id:"pkgconfig32---32-bit-pkgconf",level:2},{value:"<code>cmake()</code> - CMake modules",id:"cmake---cmake-modules",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,d.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"build-dependencies",children:"Build dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["Every build of a recipe by ",(0,s.jsx)(n.code,{children:"boulder"})," will create an entirely new root, with only the absolute minimum support dependencies in place.\nIn order to build most software, you will need to add to the ",(0,s.jsx)(n.code,{children:"builddeps"})," key in ",(0,s.jsx)(n.code,{children:"stone.yml"}),". Luckily, our tooling supports more than\none kind of dep."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that Serpent OS packages are also capable of storing ",(0,s.jsx)(n.strong,{children:"providers"})," that make the following kinds of dependencies work."]}),"\n",(0,s.jsxs)(n.h2,{id:"name---standard-deps",children:[(0,s.jsx)(n.code,{children:"$name"})," - standard deps"]}),"\n",(0,s.jsx)(n.p,{children:"Simply listing a name will create a dependency on that package name. This is discouraged as automatically resolved providers offer a\nfar more resilient system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"builddeps:\n    - some-package\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"binary---standard-binaries",children:[(0,s.jsx)(n.code,{children:"binary()"})," - Standard binaries"]}),"\n",(0,s.jsxs)(n.p,{children:["Got a hard requirement for an executable in ",(0,s.jsx)(n.code,{children:"/usr/bin"}),", such as ",(0,s.jsx)(n.code,{children:"grep"})," ?"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"builddeps:\n    - binary(grep)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"sysbinary---system-binaries",children:[(0,s.jsx)(n.code,{children:"sysbinary()"})," - System binaries"]}),"\n",(0,s.jsxs)(n.p,{children:["Need an executable only found in ",(0,s.jsx)(n.code,{children:"/usr/sbin"})," ?"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"builddeps:\n    - sysbinary(mount)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"pkgconfig---pkgconfig--pkgconf",children:[(0,s.jsx)(n.code,{children:"pkgconfig()"})," - PkgConfig / pkgconf"]}),"\n",(0,s.jsxs)(n.p,{children:["Trivially map package names to standard ",(0,s.jsx)(n.code,{children:"pkgconfig"})," names (",(0,s.jsx)(n.code,{children:".pc"})," files):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"builddeps:\n    - pkgconfig(ncurses)\n    - pkgconfig(zlib)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"pkgconfig32---32-bit-pkgconf",children:[(0,s.jsx)(n.code,{children:"pkgconfig32()"})," - 32-bit PkgConf"]}),"\n",(0,s.jsxs)(n.p,{children:["Much like ",(0,s.jsx)(n.code,{children:"pkgconfig"})," - specifically designed for ",(0,s.jsx)(n.code,{children:".pc"})," files installed to ",(0,s.jsx)(n.code,{children:"/usr/lib32/pkgconfig"})," in 32-bit builds:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"builddeps:\n    - pkgconfig32(x11)\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"cmake---cmake-modules",children:[(0,s.jsx)(n.code,{children:"cmake()"})," - CMake modules"]}),"\n",(0,s.jsx)(n.p,{children:"Work with many C++/CMake builds much more easily by using the CMake module names"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"builddeps:\n    - cmake(Qt5OpenGL)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>a});var s=i(7294);const d={},c=s.createContext(d);function a(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);